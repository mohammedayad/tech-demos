Maven commands
---------------------------------------------------------------------------------
mvn clean install -Dmaven.test.skip=true

---------------------------------------------------------------------------------
Docker Commands
---------------------------------------------------------------------------------
---to push image
docker login
docker tag app/matching-service:v1 mohammedayad/matching-service:v1
docker push mohammedayad/matching-service:v1


--list the avilabe images
docker images

--list only the repository and tag of the images without the additional details
docker images --format "{{.Repository}}:{{.Tag}}"

--to run your image (repoNmae:tagNmae)
docker run -it -p 8080:8080 app/myspring:v1

--running images
docker ps -a 



--stop all images
docker container stop $(docker container ls -aq)

--remove all images
docker container rm $(docker container ls -aq)
----------
jenkins
-----------
docker pull jenkins/jenkins:alpine-jdk11

docker pull jenkins/jenkins:jdk11

docker run -p 8080:8080 -p 50000:50000 --restart=on-failure jenkins/jenkins:alpine-jdk11

docker run -p 8080:8080 -p 50000:50000 --restart=on-failure jenkins/jenkins:jdk11

docker exec -it <container-id-or-name> bash  ///exec the docker container

Update the package manager on the container:

////to install for example maven inside the container
1- apt-get update
Install Maven:
2- apt-get install -y maven   ////This command will install the latest version of Maven available in the package manager.
If you're running into the error bash: apt-get: command not found, it's possible that the Docker image you're using does not have the apt-get package manager installed.

In that case, you can try using a different package manager to install Maven. For example, if your Docker image is based on Alpine Linux, you can use the apk package manager instead of apt-get.
apk update
```
apk add maven
```





---------------------------------------------

kubernetes Commands
---------------------------------------------------------------------------------
kubectl cluster-info 
kubectl get namespace
kubectl get pods
kubectl exec -it microservice-demo-5489d878cc-mmzkg bash
--The below commands retrieves the deployment name for the specified pod using the jsonpath output format. Similarly, you can use jsonpath to extract other details such as container names:
kubectl get pod microservice-demo-5489d878cc-mmzkg -o jsonpath='{.metadata.labels.deployment}'
kubectl get pod microservice-demo-5489d878cc-mmzkg -o jsonpath='{.spec.containers[*].name}'
--rollout the image update00change the image
kubectl set image deployment/myapp-deployment myapp-container=new-image:tag 
kubectl set image deployment/microservice-demo myspring=app/myspring:v2 
kubectl rollout history deployment microservice-demo --history of specific deployment
kubectl rollout undo deployment microservice-demo --rollback to the previouse version of specific deployment
